{
  "name": "q-git",
  "version": "0.0.2",
  "publishConfig": {
    "tag": "future"
  },
  "description": "Interface with a JS-Git repository as a Q-IO compatible file system",
  "keywords": [
    "q",
    "q-io",
    "git",
    "js-git"
  ],
  "author": {
    "name": "Kris Kowal",
    "email": "kris@cixar.com"
  },
  "license": "BS3 3-Clause",
  "repository": {
    "type": "git",
    "url": "git://github.com/montagejs/q-git.git"
  },
  "bugs": {
    "url": "https://github.com/montagejs/q-git/issues"
  },
  "main": "fs.js",
  "dependencies": {
    "js-git": "git://github.com/creationix/js-git.git",
    "q": "^2.0.2",
    "q-io": "^2.0.6",
    "collections": "^2.0.1"
  },
  "devDependencies": {
    "git-node-fs": "git://github.com/creationix/git-node-fs.git",
    "jasminum": "^2.0.5"
  },
  "scripts": {
    "test": "jasminum test"
  },
  "readme": "\n# Q-Git\n\nInterface with a [JS-Git][] repository as a [Q-IO][] compatible file system.\n\n[JS-Git]: https://github.com/creationix/js-git\n[Q-IO]: https://github.com/kriskowal/q-io\n\n\n## Usage\n\n```sh\nnpm install --save js-git q-git git-node-fs\n```\n\nCreate a repository. For example, this repository is backed by the `.git`\non your local file system.\nJS-Git requires a certain amount of ceremony oweing to its many layers of\nconfigurability and code reuse.\n\n```js\nvar repo = {};\nrepo.rootPath = fs.join(__dirname, \"..\", \".git\");\nrequire(\"git-node-fs/mixins/fs-db\")(repo, repo.rootPath);\nrequire('js-git/mixins/create-tree')(repo);\nrequire('js-git/mixins/pack-ops')(repo);\nrequire('js-git/mixins/walkers')(repo);\nrequire('js-git/mixins/read-combiner')(repo);\nrequire('js-git/mixins/formats')(repo);\n```\n\nThen create a file system face for that repository.\nFrom there, you must either load a reference from the repository, or create an\norphan branch by clearing the index.\n\n```js\nvar gitFs = new GitFs(repo);\nreturn gitFs.load(ref);\n// or...\nreturn gitFs.clear();\n```\n\nThe Git file system supports a very close approximation of the interface the\n[Q-IO][] file system.\nEach change to the file system constructs a new tree, including streaming writes\nto files.\n\nIn addition to the file system interface, there are methods for manipulating the\nindex, commiting, and updating references.\nThe index tracks the current tree, last commit, and the reference the index was\nlast loaded or saved from.\nAll of these return promises for the file system itself.\n\n-   *load(ref)* sets the index’s reference, last commit, and current tree\n    to values obtained from the repository through the reference.\n-   *clear()* clears the index’s last known commit, reference, and tree.\n    This can be called initially to start with an empty commit log and tree.\n-   *commit({message, author: {name, email}, parents: [])* creates a commit,\n    parented in the previous commit if no parents are specified, with the given\n    message and author and the current tree, but does not save the commit to a\n    reference.\n-   *save()* writes the last commit to the last reference loaded or saved.\n-   *saveAs(ref)* writes the last commit to the given reference.\n\n## Copyright and License\n\nCopyright (c) 2014, Montage Studio and contributors.\n\nBSD 3-Clause License (enclosed).\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/montagejs/q-git",
  "_id": "q-git@0.0.2",
  "_from": "q-git@0.0.2"
}
